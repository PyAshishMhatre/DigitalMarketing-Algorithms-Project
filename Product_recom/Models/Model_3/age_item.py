# -*- coding: utf-8 -*-
"""age_item.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fne32ltCJiHwvCPHcN18kZ9dQCyf2ItW
"""

import os
import time
import numpy as np
import pandas as pd
import scipy.sparse as sparse
import itertools
import implicit

#ignore warning 
import warnings
warnings.filterwarnings("ignore")

#User_item Data
age_item = pd.read_csv('https://raw.githubusercontent.com/ashwinkadam/DigitalMarketing-Algorithms-Project/main/Product_recom/Data_Prep/master_data.csv')
age_item = age_item[['age','product_id','Quantity']]

print('Creatig CSR Matrix')
####################### CSR Matrix Creation ######################################

age = list(np.sort(age_item.age.unique()))
items = list(np.sort(age_item.product_id.unique()))
Quantity = list(age_item.Quantity)

# create zero-based index position <-> user/item ID mappings
index_to_age= pd.Series(age)
# create reverse mappings from user/item ID to index positions
age_to_index = pd.Series(data=index_to_age.index , index=index_to_age.values)

# Get the rows and columns for our new matrix
products_rows = age_item.product_id.astype(int)
age_cols = age_item.age.astype(int)

# Create a sparse matrix for our users and products containing number of purchases
sparse_product_age = sparse.csr_matrix((Quantity, (products_rows, age_cols)))
sparse_product_age.data = np.nan_to_num(sparse_product_age.data, copy=False)

sparse_age_product = sparse.csr_matrix((Quantity, (age_cols, products_rows)))
sparse_age_product.data = np.nan_to_num(sparse_age_product.data, copy=False)

print('CSR Matrix Created')
print('    ')
####################### User Item Model ########################################

print('Building Model......')
# initialize model
model = implicit.als.AlternatingLeastSquares(factors=100,
                                             regularization=0.05,
                                             iterations=20,
                                             num_threads=1)

alpha_val = 40
train_set = (sparse_product_age * alpha_val).astype('double')

# train the model
model.fit(train_set, show_progress = True)

print('    ')
####################### Save factors ########################################
print('Saving factors and index.........')
# Save the array to a file
np.save('age_factors.npy', model.user_factors)

# Save the array to a file
np.save('item_factors.npy', model.item_factors)

#Save the user_to_index to a file
age_to_index.to_csv('age_to_index.csv')

print('Model Built Successfully!!!!!!!')

