# -*- coding: utf-8 -*-
"""city_item_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wNojx1B0kGH4EPQFEo07L1jOG9StRvvM
"""

import os
import time
import numpy as np
import pandas as pd
import scipy.sparse as sparse
import itertools
import implicit
from sklearn.preprocessing import LabelEncoder

#ignore warning 
import warnings
warnings.filterwarnings("ignore")


####################### Preparing Data ######################################
print('Preparing Data')
#User_item Data
city_item = pd.read_csv('https://raw.githubusercontent.com/ashwinkadam/DigitalMarketing-Algorithms-Project/main/Product_recom/Data_Prep/master_data.csv')
city_item = city_item[['city','product_id','Quantity']]

#converting city to codes
def convert_categorical_to_numerical(df):
    le = LabelEncoder()
    df_new = df.copy()
    for column in df.select_dtypes(include=['object']):
        df_new[column] = le.fit_transform(df_new[column])
    
    return df_new

#city_item table
city_item_con = convert_categorical_to_numerical(city_item)

#city code table
lookup_city = pd.merge(city_item,city_item_con, left_index=True, right_index=True)
lookup_city = lookup_city[['city_x', 'city_y']].copy()


print('Creatig CSR Matrix')
####################### CSR Matrix Creation ######################################

city = list(np.sort(city_item.city.unique()))
items = list(np.sort(city_item.product_id.unique()))
Quantity = list(city_item.Quantity)


# create zero-based index position <-> user/item ID mappings
index_to_city = pd.Series(city)
# create reverse mappings from user/item ID to index positions
city_to_index = pd.Series(data=index_to_city.index, index=index_to_city.values)


# Get the rows and columns for our new matrix
products_rows = city_item.product_id.astype(int)
city_cols = city_item.city.astype(int)

# Create a sparse matrix for our users and products containing number of purchases
sparse_product_city = sparse.csr_matrix((Quantity, (products_rows, city_cols)))
sparse_city_product = sparse.csr_matrix((Quantity, (city_cols, products_rows)))


print('CSR Matrix Created')
print('    ')
####################### User Item Model ########################################
print('Building Model......')
# initialize a model
model = implicit.als.AlternatingLeastSquares(factors=100,
                                             regularization=0.05,
                                             iterations=20,
                                             num_threads=1)

alpha_val = 40
train_set = (sparse_product_city * alpha_val).astype('double')

# train the model on a sparse matrix of item/user/confidence weights
model.fit(train_set, show_progress = True)

print('    ')
####################### Save factors ########################################
print('Saving factors and index.........')
# Save the array to a file
np.save('city_factors.npy', model.user_factors)

# Save the array to a file
np.save('item_factors.npy', model.item_factors)

#Save the user_to_index to a file
city_to_index.to_csv('city_to_index.csv')

print('Model Built Successfully!!!!!!!')

